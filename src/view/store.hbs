<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
        crossorigin="anonymous"></script>

    <script src="https://code.jquery.com/jquery-3.7.1.js"
        integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>

    <title>우리 동네 배달 대장</title>
</head>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Gowun+Dodum&display=swap');

    body {
        font-family: 'Gowun Dodum', sans-serif;
    }

    .title {
        text-align: center;
        margin: 2vw;
    }

    .title>button {
        width: 150px;
        height: 50px;
        font-size: 1.1vw;
        margin: 2vw;

        border-color: skyblue;
        background-color: skyblue;
    }

    .title>button:hover {
        border-color: skyblue;
        background-color: skyblue;

        animation: jelly 0.3s;
    }

    .title>h1 {
        font-size: 3vw;
    }

    .store-card {
        width: 50%;
        border: 1px solid #ccc;
        padding: 1rem;
        margin: 5rem auto;
        text-align: center;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        height: 240px;
        display: flex;
        border-radius: 20px 20px 20px 20px;
    }

    .store-image {
        max-width: 30%;
        height: auto;
        border-radius: 10px;
    }

    .store-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        text-align: left;
        justify-content: space-between;
        padding: 1rem;
        margin-left: 1vw;
        margin-right: 1vw;
        margin-bottom: 0.5vw;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .store-info {
        white-space: wrap;
        text-overflow: ellipsis;

        font-size: 1vw;
        margin-bottom: 3vw;
    }

    .storeBtn {
        display: flex;
        flex-direction: column;
        align-items: center;
        height: 100%;
        padding: 1rem;
        margin-left: 1vw;
        margin-top: 1vw;
    }

    .storeBtn button {
        width: 150px;
        height: 50px;
        font-size: 1vw;
        margin-top: 2vw;

        border-color: skyblue;
        background-color: skyblue;
    }

    .storeBtn button:hover {
        border-color: skyblue;
        background-color: skyblue;

        animation: jelly 0.3s;
    }

    .quantity-input {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
        font-size: 1vw;
    }

    .quantity-input input {
        width: 50px;
        text-align: center;
        border: none;
        outline: none;
    }

    .quantity-input input[type="number"]::-webkit-inner-spin-button,
    .quantity-input input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: inner-spin-button;
        opacity: 1;
    }

    label {
        font-size margin-top: 0.5vw;
        margin-bottom: 0.5vw;
        margin-left: 0.1vw;
    }

    .modalBtn {
        border-color: skyblue;
        background-color: skyblue;
    }

    .modalBtn:hover {
        border-color: skyblue;
        background-color: skyblue;

        animation: jelly 0.3s
    }

    .fixed-top-button {
        position: absolute;
        top: 10px;
        right: 10px;

        border-color: skyblue;
        background-color: skyblue;
    }

    .fixed-top-button:hover {
        border-color: skyblue;
        background-color: skyblue;

        animation: jelly 0.3s
    }

    @keyframes jelly {
        25% {
            transform: scale(0.9, 1.1);
        }

        50% {
            transform: scale(1.1, 0.9);
        }

        75% {
            transform: scale(0.95, 1.05);
        }
    }
</style>

<body>
    {{#if isCustomer}}
    <button type="button" class="btn btn-primary fixed-top-button" onclick="toCartList()">장바구니 보러 가기</button>
    {{else}}
    {{/if}}
    <div class="title">
        <h1>메뉴 조회</h1>
        <button type="button" class="btn btn-primary" onclick="getAllReviews({{storeId}})">리뷰
            보기</button>
        {{#if isCustomer}}
        {{else}}
        <button type="button" class="btn btn-primary" onclick="showModal()">메뉴 등록</button>
        {{/if}}
    </div>
    <div class="store-list">
        {{#each menus}}
        <div class="store-card">
            <img class="img-fluid store-image" src="{{this.image}}" alt="...">
            <div class="store-content">
                <h2>{{this.name}}</h2>
                <p class="store-info">가격 : {{this.price}}</p>
            </div>
            <div class="storeBtn" id="detailBtn">
                {{#if ../isCustomer}}
                <div class="quantity-input">
                    <span>수량 : </span>
                    <input type="number" value="1" min="1" id="quantity-{{this.id}}">
                </div>
                {{/if}}
                {{#if ../isCustomer}}
                <button type="button" class="btn btn-primary" value="{{this.id}}" onclick="createCart({{this.id}})">장바구니
                    담기</button>
                {{else}}
                <button type="button" class="btn btn-primary" value="{{this.id}}"
                    onclick="showSecondModal({{../storeId}}, {{this.id}})">메뉴
                    수정</button>
                {{/if}}
            </div>
        </div>
    </div>
    {{/each}}
    <div class="modal fade" id="menuModal" tabindex="-1" role="dialog" aria-labelledby="storeModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="storeModalLabel">메뉴 등록</h5>
                    <button type="button" class="btn btn-primary modalBtn" id="createBtn"
                        onclick="createMenu({{storeId}})">메뉴 등록</button>
                </div>
                <div class="modal-body">
                    <form id="storeForm" encType="multipart/form-data">
                        <div class="form-group mt-1">
                            <label for="storeImage">메뉴 이미지</label>
                            <input type="file" class="form-control" id="storeImage" name="storeImage" accept="image/*">
                            <p id="fileLabel"></p>
                        </div>
                        <div class="form-group mt-3">
                            <label for="storeName">메뉴 이름</label>
                            <input type="text" class="form-control" id="storeName" name="storeName" placeholder="메뉴 이름">
                        </div>
                        <div class="form-group mt-3">
                            <label for="storeDescription">메뉴 가격</label>
                            <textarea class="form-control" id="storeDescription" name="storeDescription"
                                placeholder="메뉴 가격"></textarea>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="updateMenuModal" tabindex="-1" role="dialog" aria-labelledby="storeModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="menuModalLabel">메뉴 수정</h5>
                    <button type="button" class="btn btn-primary modalBtn" id="updateBtn" onclick="updateMenu(1, 1)">메뉴 수정</button>
                </div>
                <div class="modal-body">
                    <form id="storeForm" encType="multipart/form-data">
                        <div class="form-group mt-1">
                            <label for="updateStoreImage">메뉴 이미지</label>
                            <input type="file" class="form-control" id="updateStoreImage" name="storeImage"
                                accept="image/*">
                            <p id="fileLabel"></p>
                        </div>
                        <div class="form-group mt-3">
                            <label for="updateStoreName">메뉴 이름</label>
                            <input type="text" class="form-control" id="updateStoreName" name="storeName"
                                placeholder="메뉴 이름">
                        </div>
                        <div class="form-group mt-3">
                            <label for="updateStoreDescription">메뉴 가격</label>
                            <textarea class="form-control" id="updateStoreDescription" name="storeDescription"
                                placeholder="메뉴 가격"></textarea>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="myModal">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">서버 응답 메시지</h5>
                </div>
                <div class="modal-body">
                    <p id="modalMessage"></p>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    const getData = async (quantityId) => {
        const count = document.getElementById(`quantity-${quantityId}`).value;

        return { count };
    }

    const createCart = async (menuId) => {
        const data = await getData(menuId);
        const token = await document.cookie.replace('=', ' ');

        try {
            const response = await fetch(`/carts/${menuId}`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `${token}`
                },
                body: JSON.stringify(data)
            });

            if (response) {
                const message = await response.json();
                modalMessage.innerText = message['message'];
                $('#myModal').modal('show');
                return;
            }
        } catch (error) {
            console.error("An error occurred:", error);
        }
    }

    const getAllReviews = async (storeId) => {
        window.location.href = `/comments/stores/${storeId}`;
    }
    
    const toCartList = async () => {
        window.location.href = '/mypage/carts';
    }

    const showModal = async () => {
        $('#menuModal').modal('show');
    }

    const createMenu = async (storeId) => {
        const file = document.getElementById('storeImage');
        const name = document.getElementById('storeName');
        const price = document.getElementById('storeDescription');

        const formData = new FormData();
        formData.append('file', file.files[0]);
        formData.append('name', name.value);
        formData.append('price', price.value);

        const token = await document.cookie.replace('=', ' ');

        try {
            const response = await fetch(`/stores/${storeId}/menus`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Authorization': `${token}`
                },
                body: formData,
            });

            if (!response.ok) {
                const message = await response.json();
                modalMessage.innerText = message['message'];
                $('#myModal').modal('show');
                return;
            }

            location.reload();

        } catch (error) {
            console.error("An error occurred:", error);
        }
    }

    const updateMenu = async (storeId, menuId) => {
        const file = document.getElementById('storeImage');
        const name = document.getElementById('storeName');
        const price = document.getElementById('storeDescription');

        const formData = new FormData();
        formData.append('file', file.files[0]);
        formData.append('name', name.value);
        formData.append('price', price.value);

        const token = await document.cookie.replace('=', ' ');

        try {
            const response = await fetch(`/stores/${storeId}/menus/${menuId}`, {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'Authorization': `${token}`
                },
                body: formData,
            });

            if (!response.ok) {
                const message = await response.json();
                modalMessage.innerText = message['message'];
                $('#myModal').modal('show');
                return;
            }

            location.reload();

        } catch (error) {
            console.error("An error occurred:", error);
        }
    }

    const showSecondModal = async (storeId, menuId) => {
        $('#updateMenuModal').modal('show');

        {{!-- const btn = await document.getElementById('updateBtn');

        btn.addEventListener('click', updateMenu(storeId, menuId)) --}}
    }
</script>

</html>